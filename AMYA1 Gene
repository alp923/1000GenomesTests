ssh alp923@sol.cc.lehigh.edu
PASSWORD
srun --partition=hawkcpu --nodes=1 --ntasks-per-node=1 --time-=200 --pty /bin/bash
cd
ls
cd /share/ceph/wym219group/shared/projects/HumanSelection
ls
cd /share/ceph/wym219group/shared/data
ls
#All of the data will be stored in candidate loci of 1000Genomes... 
ls 1000Genomes
#Load in R
module load r
R
#Load in PopGenome, rehh and vcfR packages. 
library(PopGenome)
library(rehh)
library(vcfR)
#Setting library tree 
.libPaths("/share/ceph/wym219group/shared/libraries/R")
#Set wd and check it is right 
setwd(../)
getwd()
#tell computer where the AMYA1 gene data is located, in Candidate Loci 
AMYA1gene <- "/share/ceph/wym219group/shared/data/1000Genomes/CandidateLoci/AMY1A-C_2A-B.HC3202_chr1.102554700-104758690.vcf.gz"
#GENOME.class gives data and stat values in a multi locus scale (vector or matrix)
#Connect GENOME.class with the AMYA1 data 
GENOME.class <- readVCF(AMYA1gene, numcols=1000, tid="chr1", frompos=102554700, topos=104758690, approx=FALSE, out="", parallel=FALSE, gffpath=FALSE)
GENOME.class
#Get summary information from the alignments. 
get.sum.data (GENOME.class)
neutrality.stats(GENOME.class, new.populations = FALSE, new.outgroup = FALSE, 
+     subsites = FALSE, detail = FALSE, FAST = FALSE, do.R2 = FALSE)
#Get the neutrality stats 
GENOME.class  <- neutrality.stats(GENOME.class)
#Get populations and neut stats for them. 
get.neutrality(GENOME.class)
#Get the neutrality stats for population 1, gives TajimaD, segregating sites, Fu.Li F D and S, Wu.H, Zeng.E, and Strobeck 
get.neutrality(GENOME.class)[[1]]
#This gives just the Tajima D
GENOME.class@Tajima.D
#Can also split each subsite-region separately by splitting the data. splitting.data transforms the class into another object of class GENOME.
GENOME.class.split <- splitting.data(GENOME.class, subsites="coding")
GENOME.class.split  <- neutrality.stats(GENOME.class.split)
GENOME.class.split@Tajima.D
#analyze all non-synonymous SNPs in the coding region
GENOME.class.split  <- neutrality.stats(GENOME.class.split, subsites="nonsyn")
F_ST.stats(GENOME.class)
#We are going to load the data files again for the hh object. 
hh <- data2haplohh(hap_file="/share/ceph/wym219group/shared/data/1000Genomes/CandidateLoci/AMY1A-C_2A-B.HC3202_chr1.102554700-104758690.vcf.gz", polarize_vcf=FALSE, vcf_reader= "data.table")
#The haplohh-object can be visualized by a simple plot showing ancestral alleles in blue and derived in red. 
plot(hh) 
#Now, I need to separate by the populations I want to test… 
population <- read.csv(“population_samples.tsv”, stringAsFactors=FALSE) 
view(population) 
#Calculate the EHH and iHH to search for genomes that might have recently undergone selective pressure 
res <- calc_ehh(hh, mrk=1, include_nhaplo = TRUE) 
res
# Plot the EHH values 
plot(res) 
#scan_hh() does not evaluate EHH for every allele of a focal marker, but chooses, besides the mandatory ancestral allele, the derived allele with the highest frequency. 
scan <- scan_hh(hh)
scan 
scan <- scan_hh(hh, polarized=FALSE)
#ihs evaluates the differences, calculating the log ratio between IHH_A and IHH_D, giving un-normalized values unihs. Groupign markers with the same frequency of the derived allele. 
#calculate the summary of the EHH values over a region (iHS)
ihs <- ihh2ihs(scan, freqbin = 1)
ihs
#plot the IHS using a log scale on the p-vals to condense. The standardized iHS values should follow a normal distribution with the sites under selection as outliers. A genome wide plot of the ihs values shows clearly that the central marker is rather an outlier.  
manhattanplot(ihs, threshold = c(-1.5, 1.5), cr = cr, ylim = c(-2.5, 2.5), pch = 20) 
#For REHH, we will calculate all stats up to ihs, then use calc_candidates to split the data.
cr <- calc_candidate_regions(ihs, threshold = 2, ignore_sign = TRUE, window_size = 1)
#Table to summarize all values. 
regionlen <- max(scan$POSITION) -min(scan$POSITION)
nowindows <- ceiling(regionlen/10000)
CHR <- c(rep(scan$CHR[1], nowindows))
for(i in c(1:nowindows))[{
START[i] <- min(scan$POSITION) +
	10000 * (i-1)
END[i] <- min(max(scan$POSITION),
	START[i] + 10000-1)
}
myregions <- data.frame(CHR,START,END)
myregions
